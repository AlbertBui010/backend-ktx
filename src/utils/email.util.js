import nodemailer from "nodemailer";
import dotenv from "dotenv";

dotenv.config();

// Create transporter
const transporter = nodemailer.createTransport({
  service: process.env.EMAIL_SERVICE || "gmail",
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASSWORD,
  },
});

export const emailUtils = {
  // Send password setup email
  sendPasswordSetupEmail: async (email, studentName, token) => {
    try {
      const setupUrl = `${process.env.APP_URL}/verify-email?token=${token}`;

      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: email,
        subject: "Thi·∫øt l·∫≠p m·∫≠t kh·∫©u t√†i kho·∫£n KTX",
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #2c3e50;">Ch√†o ${studentName}!</h2>
            
            <p>ƒê∆°n ƒëƒÉng k√Ω k√Ω t√∫c x√° c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c duy·ªát th√†nh c√¥ng.</p>
            
            <p>ƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω, vui l√≤ng thi·∫øt l·∫≠p m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n b·∫±ng c√°ch nh·∫•p v√†o li√™n k·∫øt d∆∞·ªõi ƒë√¢y:</p>
            
            <div style="text-align: center; margin: 30px 0;">
              <a href="${setupUrl}" 
                 style="background-color: #3498db; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; display: inline-block;">
                Thi·∫øt l·∫≠p m·∫≠t kh·∫©u
              </a>
            </div>
            
            <p><strong>L∆∞u √Ω quan tr·ªçng:</strong></p>
            <ul>
              <li>Li√™n k·∫øt n√†y s·∫Ω h·∫øt h·∫°n sau 24 gi·ªù</li>
              <li>Ch·ªâ s·ª≠ d·ª•ng li√™n k·∫øt n√†y m·ªôt l·∫ßn duy nh·∫•t</li>
              <li>Kh√¥ng chia s·∫ª li√™n k·∫øt n√†y v·ªõi ng∆∞·ªùi kh√°c</li>
            </ul>
            
            <p>N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc n√†o, vui l√≤ng li√™n h·ªá v·ªõi Ban qu·∫£n l√Ω k√Ω t√∫c x√°.</p>
            
            <hr style="margin: 30px 0; border: none; border-top: 1px solid #eee;">
            <p style="color: #7f8c8d; font-size: 12px;">
              Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng qu·∫£n l√Ω KTX. Vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y.
            </p>
          </div>
        `,
      };

      await transporter.sendMail(mailOptions);
      console.log(`Password setup email sent to ${email}`);
    } catch (error) {
      console.error("Error sending password setup email:", error);
      throw error;
    }
  },

  // Send welcome email after successful registration
  sendWelcomeEmail: async (email, studentName, roomInfo) => {
    try {
      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: email,
        subject: "Ch√†o m·ª´ng ƒë·∫øn v·ªõi KTX - Th√¥ng tin ph√≤ng ·ªü",
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #27ae60;">Ch√†o m·ª´ng ${studentName}!</h2>
            
            <p>Ch√∫c m·ª´ng b·∫°n ƒë√£ ƒë∆∞·ª£c ph√¢n b·ªï ch·ªó ·ªü t·∫°i k√Ω t√∫c x√°.</p>
            
            <div style="background-color: #f8f9fa; padding: 20px; border-radius: 5px; margin: 20px 0;">
              <h3 style="color: #2c3e50; margin-top: 0;">Th√¥ng tin ch·ªó ·ªü:</h3>
              <p><strong>Ph√≤ng:</strong> ${roomInfo.room}</p>
              <p><strong>Gi∆∞·ªùng:</strong> ${roomInfo.bed}</p>
              <p><strong>T·∫ßng:</strong> ${roomInfo.floor}</p>
              <p><strong>Lo·∫°i ph√≤ng:</strong> ${roomInfo.roomType}</p>
            </div>
            
            <p><strong>H∆∞·ªõng d·∫´n ti·∫øp theo:</strong></p>
            <ol>
              <li>Ho√†n th√†nh th·ªß t·ª•c nh·∫≠p h·ªçc</li>
              <li>ƒê√≥ng ph√≠ k√Ω t√∫c x√° theo quy ƒë·ªãnh</li>
              <li>Tu√¢n th·ªß n·ªôi quy k√Ω t√∫c x√°</li>
            </ol>
            
            <p>Ch√∫c b·∫°n c√≥ m·ªôt nƒÉm h·ªçc th√†nh c√¥ng v√† t·∫≠n h∆∞·ªüng cu·ªôc s·ªëng t·∫°i k√Ω t√∫c x√°!</p>
            
            <hr style="margin: 30px 0; border: none; border-top: 1px solid #eee;">
            <p style="color: #7f8c8d; font-size: 12px;">
              Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng qu·∫£n l√Ω KTX. Vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y.
            </p>
          </div>
        `,
      };

      await transporter.sendMail(mailOptions);
      console.log(`Welcome email sent to ${email}`);
    } catch (error) {
      console.error("Error sending welcome email:", error);
      throw error;
    }
  },

  // Send rejection email to student
  sendRejectionEmail: async (email, studentName, reason = null) => {
    try {
      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: email,
        subject: "Th√¥ng b√°o v·ªÅ phi·∫øu ƒëƒÉng k√Ω KTX",
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #e74c3c;">Th√¥ng b√°o phi·∫øu ƒëƒÉng k√Ω KTX</h2>
            
            <p>Xin ch√†o ${studentName},</p>
            
            <p>Ch√∫ng t√¥i r·∫•t ti·∫øc ph·∫£i th√¥ng b√°o r·∫±ng phi·∫øu ƒëƒÉng k√Ω k√Ω t√∫c x√° c·ªßa b·∫°n <strong>kh√¥ng ƒë∆∞·ª£c duy·ªát</strong>.</p>
            
            ${
              reason
                ? `
              <div style="background-color: #fff3cd; padding: 15px; border-radius: 5px; margin: 20px 0; border-left: 4px solid #ffc107;">
                <h4 style="color: #856404; margin-top: 0;">L√Ω do t·ª´ ch·ªëi:</h4>
                <p style="color: #856404; margin-bottom: 0;">${reason}</p>
              </div>
            `
                : ""
            }
            
            <p><strong>C√°c b∆∞·ªõc ti·∫øp theo:</strong></p>
            <ul>
              <li>Ki·ªÉm tra l·∫°i th√¥ng tin v√† h·ªì s∆° ƒë√£ n·ªôp</li>
              <li>Li√™n h·ªá v·ªõi Ban qu·∫£n l√Ω k√Ω t√∫c x√° ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n c·ª• th·ªÉ</li>
              <li>C√≥ th·ªÉ n·ªôp l·∫°i h·ªì s∆° trong k·ª≥ ƒëƒÉng k√Ω ti·∫øp theo (n·∫øu c√≥)</li>
            </ul>
            
            <div style="background-color: #d1ecf1; padding: 15px; border-radius: 5px; margin: 20px 0; border-left: 4px solid #17a2b8;">
              <h4 style="color: #0c5460; margin-top: 0;">Th√¥ng tin li√™n h·ªá:</h4>
              <p style="color: #0c5460; margin-bottom: 0;">
                ƒê·ªÉ bi·∫øt th√™m chi ti·∫øt ho·∫∑c khi·∫øu n·∫°i, vui l√≤ng li√™n h·ªá:<br>
                üìß Email: ktx@university.edu.vn<br>
                üìû ƒêi·ªán tho·∫°i: (024) 1234-5678<br>
                üè¢ VƒÉn ph√≤ng: T·∫ßng 1, T√≤a nh√† A, Cao L·ªó, Qu·∫≠n 8
              </p>
            </div>
            
            <p>Ch√∫ng t√¥i xin l·ªói v√¨ s·ª± b·∫•t ti·ªán n√†y v√† c·∫£m ∆°n b·∫°n ƒë√£ quan t√¢m ƒë·∫øn d·ªãch v·ª• k√Ω t√∫c x√°.</p>
            
            <p>Tr√¢n tr·ªçng,<br>Ban qu·∫£n l√Ω k√Ω t√∫c x√°</p>
            
            <hr style="margin: 30px 0; border: none; border-top: 1px solid #eee;">
            <p style="color: #7f8c8d; font-size: 12px;">
              Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng qu·∫£n l√Ω KTX. Vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y.
            </p>
          </div>
        `,
      };

      await transporter.sendMail(mailOptions);
      console.log(`Rejection email sent to ${email}`);
    } catch (error) {
      console.error("Error sending rejection email:", error);
      throw error;
    }
  },

  // Send notification email to staff
  sendStaffNotificationEmail: async (email, subject, message) => {
    try {
      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: email,
        subject: `[KTX System] ${subject}`,
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #e74c3c;">Th√¥ng b√°o h·ªá th·ªëng KTX</h2>
            <p>${message}</p>
            <p>Vui l√≤ng ƒëƒÉng nh·∫≠p v√†o h·ªá th·ªëng ƒë·ªÉ xem chi ti·∫øt.</p>
            
            <hr style="margin: 30px 0; border: none; border-top: 1px solid #eee;">
            <p style="color: #7f8c8d; font-size: 12px;">
              Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng qu·∫£n l√Ω KTX.
            </p>
          </div>
        `,
      };

      await transporter.sendMail(mailOptions);
    } catch (error) {
      console.error("Error sending staff notification email:", error);
      throw error;
    }
  },

  // Test email connection
  testConnection: async () => {
    try {
      await transporter.verify();
      console.log("‚úÖ Email service is ready");
      return true;
    } catch (error) {
      console.error("‚ùå Email service connection failed:", error);
      return false;
    }
  },
};
