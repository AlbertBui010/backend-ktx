import { DonGiaDien, HdTienDien, HdTienDienSinhVien } from "../models/index.js";
import { electricityUtils } from "../utils/electricity.util.js";

/**
 * Script ƒë·ªÉ t·∫°o d·ªØ li·ªáu m·∫´u cho h·ªá th·ªëng ti·ªÅn ƒëi·ªán
 */
async function seedElectricityData() {
  try {
    console.log("üå± B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu m·∫´u cho h·ªá th·ªëng ti·ªÅn ƒëi·ªán...");

    // 1. T·∫°o ƒë∆°n gi√° ƒëi·ªán m·∫´u
    console.log("üìã T·∫°o ƒë∆°n gi√° ƒëi·ªán m·∫´u...");

    const sampleRates = [
      {
        don_gia: 3500.0,
        tu_ngay: "2024-01-01",
        den_ngay: "2024-06-30",
        ghi_chu: "ƒê∆°n gi√° ƒëi·ªán 6 th√°ng ƒë·∫ßu nƒÉm 2024",
        nguoi_tao: 1,
      },
      {
        don_gia: 3800.0,
        tu_ngay: "2024-07-01",
        den_ngay: null,
        ghi_chu: "ƒê∆°n gi√° ƒëi·ªán t·ª´ th√°ng 7/2024",
        nguoi_tao: 1,
      },
    ];

    for (const rate of sampleRates) {
      const existingRate = await DonGiaDien.findOne({
        where: { tu_ngay: rate.tu_ngay },
      });

      if (!existingRate) {
        await DonGiaDien.create(rate);
        console.log(`‚úÖ T·∫°o ƒë∆°n gi√° ƒëi·ªán: ${rate.don_gia} VND/kWh t·ª´ ${rate.tu_ngay}`);
      } else {
        console.log(`‚ö†Ô∏è  ƒê∆°n gi√° ƒëi·ªán t·ª´ ${rate.tu_ngay} ƒë√£ t·ªìn t·∫°i`);
      }
    }

    console.log("‚úÖ Ho√†n th√†nh t·∫°o d·ªØ li·ªáu m·∫´u!");
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o d·ªØ li·ªáu m·∫´u:", error);
  }
}

/**
 * Test c√°c function utility
 */
async function testElectricityUtils() {
  try {
    console.log("üß™ B·∫Øt ƒë·∫ßu test c√°c utility functions...");

    // Test l√†m tr√≤n
    console.log("üìä Test l√†m tr√≤n ti·ªÅn:");
    const testAmounts = [33333.33, 12345.67, 99999.99, 50000.0];
    testAmounts.forEach((amount) => {
      const rounded = electricityUtils.roundAmount(amount);
      console.log(`  ${amount} ‚Üí ${rounded}`);
    });

    // Test t√≠nh ng√†y
    console.log("üìÖ Test t√≠nh s·ªë ng√†y:");
    const testDates = [
      ["2024-01-01", "2024-01-31"],
      ["2024-02-01", "2024-02-29"],
      ["2024-01-15", "2024-01-25"],
    ];
    testDates.forEach(([start, end]) => {
      const days = electricityUtils.calculateDaysBetween(start, end);
      console.log(`  ${start} ‚Üí ${end}: ${days} ng√†y`);
    });

    // Test l·∫•y ƒë∆°n gi√° ƒëi·ªán
    console.log("üí∞ Test l·∫•y ƒë∆°n gi√° ƒëi·ªán:");
    const testDate = "2024-08-15";
    const rate = await electricityUtils.getElectricityRateAtDate(testDate);
    if (rate) {
      console.log(`  ƒê∆°n gi√° t·∫°i ${testDate}: ${rate.don_gia} VND/kWh`);
    } else {
      console.log(`  Kh√¥ng t√¨m th·∫•y ƒë∆°n gi√° t·∫°i ${testDate}`);
    }

    console.log("‚úÖ Ho√†n th√†nh test utilities!");
  } catch (error) {
    console.error("‚ùå L·ªói khi test utilities:", error);
  }
}

/**
 * Main function
 */
async function main() {
  console.log("üöÄ Kh·ªüi ch·∫°y script setup h·ªá th·ªëng ti·ªÅn ƒëi·ªán...");

  await seedElectricityData();
  await testElectricityUtils();

  console.log("üéâ Ho√†n th√†nh setup h·ªá th·ªëng ti·ªÅn ƒëi·ªán!");
  process.exit(0);
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch((error) => {
    console.error("‚ùå L·ªói trong qu√° tr√¨nh setup:", error);
    process.exit(1);
  });
}

export { seedElectricityData, testElectricityUtils };
